// <auto-generated />
using System;
using LingoLogger.Data.Access;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace data.access.Migrations
{
    [DbContext(typeof(LingoLoggerDbContext))]
    partial class LingoLoggerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LingoLogger.Data.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AmountOfSeconds")
                        .HasMaxLength(86400)
                        .HasColumnType("integer");

                    b.Property<double>("Coefficient")
                        .HasMaxLength(86400)
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP AT TIME ZONE 'UTC'");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Medium")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasDiscriminator<string>("LogType").HasValue("Log");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("LingoLogger.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LingoLogger.Data.Models.AudibleLog", b =>
                {
                    b.HasBaseType("LingoLogger.Data.Models.Log");

                    b.HasDiscriminator().HasValue("Audible");
                });

            modelBuilder.Entity("LingoLogger.Data.Models.ReadableLog", b =>
                {
                    b.HasBaseType("LingoLogger.Data.Models.Log");

                    b.Property<int>("CharactersRead")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Readable");
                });

            modelBuilder.Entity("LingoLogger.Data.Models.WatchableLog", b =>
                {
                    b.HasBaseType("LingoLogger.Data.Models.Log");

                    b.Property<int?>("EpisodeLengthInMinutes")
                        .HasColumnType("integer");

                    b.Property<int?>("EpisodesWatched")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Watchable");
                });

            modelBuilder.Entity("LingoLogger.Data.Models.Log", b =>
                {
                    b.HasOne("LingoLogger.Data.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LingoLogger.Data.Models.User", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
